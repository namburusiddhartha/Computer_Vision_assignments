def visualize_line_segments(image_name, constants):
    image_rgb = cv2.cvtColor(cv2.imread(image_name), cv2.COLOR_BGR2RGB)  
    image = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2GRAY)
    image_m, image_o, image_x, image_y = edge_detection_nms(image, constants.sigma)
    vis_image_rgb = np.copy(image_rgb)
    
    #--------------hough transform----------------
    H, rho_arr, theta_arr = hough_transform(image_m, constants.thres, constants.rho_res, constants.theta_res)
    H = hough_accumulator_nms(H) # nms on H
    peak_rho_arr, peak_theta_arr = peak_hough_lines(H, rho_arr, theta_arr, constants.num_lines)
    image_m_thres = 1.0*(image_m > constants.thres)
    
    # visualize line segments (not infinite lines!)
    vis_line_len = 10 # len of line in pixels, big enough to span the image
    vis_image_rgb = np.copy(image_rgb)
    #print(peak_rho_arr[0:50] , peak_theta_arr[0:50])
    for i in range(0 ,image_m.shape[0]):
        for j in range(0, image_m.shape[1]):
            if (image_m_thres[i,j] != 0):
                for (rho, theta) in zip(peak_rho_arr, peak_theta_arr):
                    x0 = rho*np.cos(theta); y0 = rho*np.sin(theta)
                    if (abs(x0 - j )< 0.1 and abs(y0 - i) < 0.1):
                        x1 = int(j - vis_line_len*np.sin(theta)); y1 = int(i + vis_line_len*np.cos(theta))
                        x2 = int(j + vis_line_len*np.sin(theta)); y2 = int(i - vis_line_len*np.cos(theta)); 
                        cv2.line(vis_image_rgb, (x1, y1), (x2, y2), (0, 255, 0), 2)
            
    plt.imshow(vis_image_rgb); plt.show() 
    
    # YOUR CODE HERE
    #raise NotImplementedError()
    
    return image_rgb, vis_image_rgb